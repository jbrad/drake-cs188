{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport fetch from 'isomorphic-unfetch';\nexport var getCustomersCart = function getCustomersCart() {\n  var customerResponse, _await$customerRespon, _await$customerRespon2, customer, cartResponse, _await$cartResponse$j, _await$cartResponse$j2, cart, cartItemResponse, cartItems, itemsToFetch, itemResponses, items;\n\n  return _regeneratorRuntime.async(function getCustomersCart$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch(\"http://localhost:5555/customers\"));\n\n        case 2:\n          customerResponse = _context.sent;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(customerResponse.json());\n\n        case 5:\n          _await$customerRespon = _context.sent;\n          _await$customerRespon2 = _slicedToArray(_await$customerRespon, 1);\n          customer = _await$customerRespon2[0];\n          _context.next = 10;\n          return _regeneratorRuntime.awrap(fetch(\"http://localhost:5555/customers/\".concat(customer.customerId, \"/carts\")));\n\n        case 10:\n          cartResponse = _context.sent;\n          _context.next = 13;\n          return _regeneratorRuntime.awrap(cartResponse.json());\n\n        case 13:\n          _await$cartResponse$j = _context.sent;\n          _await$cartResponse$j2 = _slicedToArray(_await$cartResponse$j, 1);\n          cart = _await$cartResponse$j2[0];\n          _context.next = 18;\n          return _regeneratorRuntime.awrap(fetch(\"http://localhost:5555/carts/\".concat(cart.cartId, \"/cart-items\")));\n\n        case 18:\n          cartItemResponse = _context.sent;\n          _context.next = 21;\n          return _regeneratorRuntime.awrap(cartItemResponse.json());\n\n        case 21:\n          cartItems = _context.sent;\n          itemsToFetch = cartItems.map(function (cartItem) {\n            return fetch(\"http://localhost:5555/items/\".concat(cartItem.itemId));\n          });\n          _context.next = 25;\n          return _regeneratorRuntime.awrap(Promise.all(itemsToFetch));\n\n        case 25:\n          itemResponses = _context.sent;\n          _context.next = 28;\n          return _regeneratorRuntime.awrap(Promise.all(itemResponses.map(function (itemResponse) {\n            return itemResponse.json();\n          })));\n\n        case 28:\n          items = _context.sent;\n          return _context.abrupt(\"return\", {\n            customer: customer,\n            cartItems: cartItems,\n            items: items\n          });\n\n        case 30:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};","map":{"version":3,"sources":["/Users/scottmolloy/Desktop/04 software_engineering/cartTest/hello-next/services/cart-item-service.js"],"names":["fetch","getCustomersCart","customerResponse","json","customer","customerId","cartResponse","cart","cartId","cartItemResponse","cartItems","itemsToFetch","map","cartItem","itemId","Promise","all","itemResponses","itemResponse","items"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,oBAAlB;AAEA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACDD,KAAK,mCADJ;;AAAA;AAC1BE,UAAAA,gBAD0B;AAAA;AAAA,2CAEPA,gBAAgB,CAACC,IAAjB,EAFO;;AAAA;AAAA;AAAA;AAEzBC,UAAAA,QAFyB;AAAA;AAAA,2CAGLJ,KAAK,2CAAoCI,QAAQ,CAACC,UAA7C,YAHA;;AAAA;AAG1BC,UAAAA,YAH0B;AAAA;AAAA,2CAIXA,YAAY,CAACH,IAAb,EAJW;;AAAA;AAAA;AAAA;AAIzBI,UAAAA,IAJyB;AAAA;AAAA,2CAKDP,KAAK,uCAAgCO,IAAI,CAACC,MAArC,iBALJ;;AAAA;AAK1BC,UAAAA,gBAL0B;AAAA;AAAA,2CAMRA,gBAAgB,CAACN,IAAjB,EANQ;;AAAA;AAM1BO,UAAAA,SAN0B;AAO1BC,UAAAA,YAP0B,GAOXD,SAAS,CAACE,GAAV,CAAc,UAACC,QAAD;AAAA,mBAAcb,KAAK,uCAAgCa,QAAQ,CAACC,MAAzC,EAAnB;AAAA,WAAd,CAPW;AAAA;AAAA,2CAQJC,OAAO,CAACC,GAAR,CAAYL,YAAZ,CARI;;AAAA;AAQ1BM,UAAAA,aAR0B;AAAA;AAAA,2CASZF,OAAO,CAACC,GAAR,CAAYC,aAAa,CAACL,GAAd,CAAkB,UAACM,YAAD;AAAA,mBAAkBA,YAAY,CAACf,IAAb,EAAlB;AAAA,WAAlB,CAAZ,CATY;;AAAA;AAS1BgB,UAAAA,KAT0B;AAAA,2CAWzB;AACHf,YAAAA,QAAQ,EAARA,QADG;AAEHM,YAAAA,SAAS,EAATA,SAFG;AAGHS,YAAAA,KAAK,EAALA;AAHG,WAXyB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAzB","sourcesContent":["import fetch from 'isomorphic-unfetch';\n\nexport const getCustomersCart = async () => {\nconst customerResponse = await fetch(`http://localhost:5555/customers`);\nconst [customer] = await customerResponse.json();\nconst cartResponse = await fetch(`http://localhost:5555/customers/${customer.customerId}/carts`);\nconst [cart] = await cartResponse.json();\nconst cartItemResponse = await fetch(`http://localhost:5555/carts/${cart.cartId}/cart-items`);\nconst cartItems = await cartItemResponse.json();\nconst itemsToFetch = cartItems.map((cartItem) => fetch(`http://localhost:5555/items/${cartItem.itemId}`));\nconst itemResponses = await Promise.all(itemsToFetch);\nconst items = await Promise.all(itemResponses.map((itemResponse) => itemResponse.json()));\n\nreturn {\n    customer,\n    cartItems,\n    items\n};\n};"]},"metadata":{},"sourceType":"module"}