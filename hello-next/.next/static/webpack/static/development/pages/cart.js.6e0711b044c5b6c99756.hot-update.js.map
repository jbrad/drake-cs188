{"version":3,"file":"static/webpack/static/development/pages/cart.js.6e0711b044c5b6c99756.hot-update.js","sources":["webpack:///./pages/cart.js","webpack:///./services/cart-item-service.js"],"sourcesContent":["import Link from 'next/link';\nimport fetch from 'isomorphic-unfetch';\nimport { getCustomersCart } from '../services/cart-item-service';\n\nconst removeItemFromCart = async (cartItem) => {\n    await fetch(`http://localhost:5555/cart-items/${cartItem.cartItemId}`, {\n        method: 'DELETE'\n    })\n    location.reload(); \n};\n\n\nconst Index = props => (\n    <section>\n        <h1>{props.customer.firstName}'s Cart</h1>\n        <p>You have {props.cartItems.length} {props.cartItems.length === 1 ? 'item' : 'items'} in your cart.</p>\n        <ul>\n            {props.items.map((item, index) => (\n                <li key={item.itemId}>\n                    <Link href=\"/items/[itemId]\" as={`/items/${item.itemId}`}>\n                        <a>{item.description}</a>\n                    </Link>\n                    <button type=\"button\" onClick={() => removeItemFromCart(props.cartItems[index])}>Remove</button>\n                </li>\n            ))}\n        </ul>\n        <p>Current Total: ${props.items.reduce((accum, item) => accum + item.price, 0)}</p>\n        {props.items.length === 0 && \n        <Link href=\"/items\">\n            <a title=\"Shop!\">Start shopping!</a>\n        </Link>}\n    </section>\n);\n\n\nIndex.getInitialProps = getCustomersCart;\n\nexport default Index;\n\n","import fetch from 'isomorphic-unfetch';\n\nexport const getCustomersCart = async () => {\nconst customerResponse = await fetch(`http://localhost:5555/customers`);\nconst [customer] = await customerResponse.json();\nconst cartResponse = await fetch(`http://localhost:5555/customers/${customer.customerId}/carts`);\nconst [cart] = await cartResponse.json();\nconst cartItemResponse = await fetch(`http://localhost:5555/carts/${cart.cartId}/cart-items`);\nconst cartItems = await cartItemResponse.json();\nconst itemsToFetch = cartItems.map((cartItem) => fetch(`http://localhost:5555/items/${cartItem.itemId}`));\nconst itemResponses = await Promise.all(itemsToFetch);\nconst items = await Promise.all(itemResponses.map((itemResponse) => itemResponse.json()));\n\nreturn {\n    customer,\n    cartItems,\n    items\n};\n};"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AADA;AACA;AAFA;AAIA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAOA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAjBA;AACA;AAsBA;AAEA;;;;;;;;;;;;;;;;;;;;;ACrCA;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAEA;AAFA;AAAA;AACA;AADA;AAGA;AAHA;AAAA;AACA;AADA;AAAA;AAAA;AAIA;AAJA;AAAA;AACA;AADA;AAKA;AALA;AAAA;AACA;AADA;AAMA;AACA;AAAA;AAAA;AAPA;AAAA;AACA;AADA;AAQA;AARA;AAAA;AASA;AAAA;AACA;AAVA;AASA;AATA;AAYA;AACA;AACA;AAHA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}